// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admins {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  loginTryCount Int @default(0)
  role Roles @relation(fields: [roleId], references: [id])
  roleId String
  verificationCode String @default("000000") @db.VarChar(6)
  hasLogin Boolean @default(false)
  latestLogin DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id String @id @default(uuid())
  name RoleNames @default(viewer)
  permissions Permissions[]
  admins Admins[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permissions {
  id String @id @default(uuid())
  name PermissionNames @default(read)
  role Roles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Levels {
  id String @id @default(uuid())
  name LevelNames @default(N5)
  courses Courses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Types {
  id String @id @default(uuid())
  name CourseTypes @default(grammer)
  courses Courses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Users {
  id String @id @default(uuid())
  name String
  email String @unique
  phone String
  password String
  isEmailVerified Boolean @default(false)
  isPaid Boolean  @default(false)
  startDate DateTime?
  expiredDate DateTime?
  verificationCode String @default("000000") @db.VarChar(6)
  questions Questions[]
  userTracking UserTracking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instructors {
  id String @id @default(uuid())
  name String
  email String
  phone String
  description String
  photo String?
  address String
  password String
  // CourseInstructor CourseInstructor[]
  answers Answers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses {
  id String @id @default(uuid())
  name String
  duration Int
  isPublic Boolean @default(false)
  courseType Types @relation(fields: [type], references: [id])
  type String
  courseLevel Levels @relation(fields: [level], references: [id])
  level String
  contents Contents[]
  // instructors CourseInstructor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

// model CourseInstructor {
//   id String @id @default(uuid())
//   instructor Instructors @relation(fields: [instructorId], references: [id])
//   instructorId String
//   course Courses @relation(fields: [courseId], references: [id])
//   courseId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Contents {
  id String @id @default(uuid())
  name String
  thumbnail String
  url String
  isPublic Boolean
  course Courses @relation(fields: [courseId], references: [id])
  courseId String
  userTracking UserTracking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Questions {
  id String @id @default(uuid())
  question String 
  user Users @relation(fields: [userId], references: [id])
  userId String
  answers Answers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answers {
  id String @id @default(uuid())
  answer String
  question Questions @relation(fields: [questionId], references: [id])
  questionId String
  instructor Instructors @relation(fields: [instructorId], references: [id])
  instructorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTracking {
  id String @id @default(uuid())
  content Contents @relation(fields: [contentId], references: [id])
  contentId String
  user Users @relation(fields: [userId], references: [id])
  userId String
  completedPercent Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CourseTypes {
  grammer
  listening
  reading
  kanji
  vocaburary
  speaking
  vlog
}

enum LevelNames {
  N5
  N4
  N3
  N2
  N1
}

enum PermissionNames {
  create
  update
  read
  delete
}

enum RoleNames {
  superAdmin
  admin
  editor
  viewer
}