generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admins {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  password         String
  loginTryCount    Int      @default(0)
  role             Roles    @relation(fields: [roleId], references: [id])
  roleId           String
  verificationCode String   @default("000000") @db.VarChar(6)
  hasLogin         Boolean  @default(false)
  latestLogin      DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id          String        @id @default(uuid())
  name        RoleNames     @default(viewer)
  permissions Permissions[]
  admins      Admins[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permissions {
  id   String          @id @default(uuid())
  name PermissionNames @default(read)
  role Roles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Levels {
  id         String        @id @default(uuid())
  name       LevelNames    @default(N5)
  courses    Courses[]
  sections   ExamSection[]
  ExamResult ExamResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Types {
  id      String      @id @default(uuid())
  name    CourseTypes @default(grammer)
  courses Courses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Users {
  id              String            @id @default(uuid())
  name            String
  email           String
  phone           String            @unique
  password        String
  isPaid          Boolean           @default(false)
  startDate       DateTime?
  expiredDate     DateTime?
  otpCode         String
  questions       Questions[]
  examResult      ExamResult[]
  contentTracking ContentTracking[]
  testTracking    TestTracking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instructors {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String
  description String
  photo       String?
  address     String
  password    String
  // CourseInstructor CourseInstructor[]
  answers     Answers[]
  courses     Courses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses {
  id          String        @id @default(uuid())
  name        String
  duration    Int
  isPublic    Boolean       @default(false)
  courseType  Types         @relation(fields: [type], references: [id])
  type        String
  courseLevel Levels        @relation(fields: [level], references: [id])
  level       String
  contents    Contents[]
  instructors Instructors[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Contents {
  id        String            @id @default(uuid())
  name      String
  thumbnail String
  url       String
  isPublic  Boolean
  course    Courses           @relation(fields: [courseId], references: [id])
  courseId  String
  tests     Tests[]
  tracking  ContentTracking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tests {
  id        String         @id @default(uuid())
  question  String
  content   Contents       @relation(fields: [contentId], references: [id])
  contentId String
  answers   TestAnswers[]
  tracking  TestTracking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestAnswers {
  id        String  @id @default(uuid())
  answer    String
  isCorrect Boolean
  test      Tests   @relation(fields: [testId], references: [id])
  testId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Questions {
  id       String    @id @default(uuid())
  question String
  user     Users     @relation(fields: [userId], references: [id])
  userId   String
  answers  Answers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answers {
  id           String      @id @default(uuid())
  answer       String
  question     Questions   @relation(fields: [questionId], references: [id])
  questionId   String
  instructor   Instructors @relation(fields: [instructorId], references: [id])
  instructorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentTracking {
  id               String   @id @default(uuid())
  user             Users    @relation(fields: [userId], references: [id])
  userId           String
  content          Contents @relation(fields: [contentId], references: [id])
  contentId        String
  completedPercent Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestTracking {
  id     String @id @default(uuid())
  user   Users  @relation(fields: [userId], references: [id])
  userId String
  test   Tests  @relation(fields: [testId], references: [id])
  testId String
  score  Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExamResult {
  id      String @id @default(uuid())
  result  Json
  exam    Exam   @relation(fields: [examId], references: [id])
  examId  String
  level   Levels @relation(fields: [levelId], references: [id])
  levelId String
  user    Users  @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id         String        @id @default(uuid())
  name       String
  duration   Int
  sections   ExamSection[]
  ExamResult ExamResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExamSection {
  id        String         @id @default(uuid())
  name      String
  exam      Exam           @relation(fields: [examId], references: [id])
  examId    String
  level     Levels         @relation(fields: [levelId], references: [id])
  levelId   String
  questions ExamQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExamQuestion {
  id        String       @id @default(uuid())
  question  String
  section   ExamSection  @relation(fields: [sectionId], references: [id])
  sectionId String
  answers   ExamAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExamAnswer {
  id         String       @id @default(uuid())
  answer     String
  isCorrect  Boolean
  question   ExamQuestion @relation(fields: [questionId], references: [id])
  questionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestioniarsQuizz {
  id       String              @id @default(uuid())
  question String
  answers  QuestioniarAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestioniarAnswer {
  id         String            @id @default(uuid())
  answer     String
  count      Int
  question   QuestioniarsQuizz @relation(fields: [questionId], references: [id])
  questionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Suggestion {
  id         String @id @default(uuid())
  title      String
  suggestion String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CourseTypes {
  grammer
  listening
  reading
  kanji
  vocaburary
  speaking
  vlog
}

enum LevelNames {
  N5
  N4
  N3
  N2
  N1
}

enum PermissionNames {
  create
  update
  read
  delete
}

enum RoleNames {
  superAdmin
  admin
  editor
  viewer
}
